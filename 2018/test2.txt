
0
addi 4 16 4    ip  += 16

1
seti 1 5 3     [3]  = 1                    //
seti 1 9 1     [1]  = 1                    //
mulr 3 1 2     [2]  = [3]*[1]              // Init registers [x, 1, 3*1 === 5 ? 1 : 0, 1, x, x]
eqrr 2 5 2     [2]  = [2] === [5] ? 1 : 0  // 

5
addr 2 4 4     ip  += [2]                  //
addi 4 1 4     ip  += 1                    // [4] = [2] + 1; Either 0+1 or 1+1

7
addr 3 0 0     [0] += [3]                  // [0] += [3]
addi 1 1 1     [1] += 1                    // [1]++
gtrr 1 5 2     [2]  = [1] > [5] ? 1 : 0    // 

10
addr 4 2 4     ip  += [2]                  // if [4] + [2] === 0 goto 2 else goto [4] + [2]
seti 2 9 4     ip   = 2                    //

12
addi 3 1 3     [3] += 1                    // Only used here
gtrr 3 5 2     [2]  = [3] > [5] ? 1 : 0    // [2] = ++[3] > [5] ? 1 : 0

14
addr 2 4 4     [4] += [2]                  // [4] += [2]
seti 1 8 4     [4]  = 1                    //  
mulr 4 4 4     [4] *= [4]                  // goto 1

17
addi 5 2 5     [5] += 2                    //
mulr 5 5 5     [5] *= [5]                  //
mulr 4 5 5     [5] *= ip                   //
muli 5 11 5    [5] *= 11                   // [5] = ([5]+2)^2 * [4] * 11
-- addi 2 4 2  [2] += 4                    //
mulr 2 4 2     [2] *= ip                   //
-- addi 2 5 2  [2] += 5                    // [2] = ([2]+4) * [4] + 5
addr 5 2 5     [5] += [2]                  // [5] += [2]

25
addr 4 0 4     [4] += [0]                  // [4] += [0]
seti 0 9 4     [4]  = 0                    // goto 0

27
setr 4 2 2     [2]  = [4]                  //
mulr 2 4 2     [2] *= [4]                  //
addr 4 2 2     [2] += [4]                  //
mulr 4 2 2     [2] *= [4]                  //
muli 2 14 2    [2] *= 14                   //
mulr 2 4 2     [2] *= [4]                  // [2] = [4]^2 + [4] * [4] * 14 * [4]
addr 5 2 5     [5] += [2]                  // [5] += [2]

34
seti 0 0 0     [0]  = 0                    // [0] = 0
seti 0 8 4     [4]  = 0                    // goto 0

